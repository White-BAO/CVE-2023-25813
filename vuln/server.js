//models - DB연결 및 테이블 생성
const models = require('./models');
const User = models.User;
const express = require('express');
const path = require('path');
const app = express();
const { Op, or, literal } = require('sequelize');
const PORT = process.env.PORT || 3001;
const session = require('express-session');

// DB연결상태 확인
models.sequelize.sync().then(() => {
    console.log('Database synchronized');
    app.listen(PORT, () => {
        console.log(`Server is running on http://localhost:${PORT}`);
    });
}).catch(err => {
    console.error('Error syncing database:', err);
});

// 세션 설정
app.use(session({
    secret: 'P4C',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: false,
        maxAge: 1000 * 60 * 60 
    }
}));

// HTML 및 CSS 파일설정 (static)
app.use('/static', express.static(path.join(__dirname, 'static')));

// 각각 라우트 설정 (get 메서드)
app.get('/login', (req, res) => {
    res.sendFile(path.join(__dirname, 'static', 'login.html'));
});

app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'static', 'index.html'));
});

app.get('/find_my_password', (req, res) => {
    res.sendFile(path.join(__dirname, 'static', 'find_my_password.html'));
});


app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// 로그인라우트
app.post('/login', (req, res) => {
  const uid = req.body.uid
  const upw = req.body.upw
  User.findOne({
      where: or(
          literal('LOWER("uid") = LOWER(:uid)'),
          { upw: upw },
      ),
  replacements: { uid: uid },
}).then(user => {
    if (user) {
        req.session.user = user;
        res.send('LOGIN success');
        console.log(user);
    } else {
        res.send('UID or UPW are not correct.');
    }
}).catch(error => {
    console.error("Query failed:", error);
    res.status(500).send('Internal server error');
});
});

//비밀번호 찾기
app.post('/find_my_password', (req, res) => {
    const email = req.body.email
    const name = req.body.name
    User.findOne({
        where: or(
            literal('LOWER("email") = LOWER(:email)'),
            { name: name },
        ),
    replacements: { email: email },
  }).then(user => {
      if (user) {
         res.send({
            message: 'User found',
            uid: user.uid,
            upw: user.upw,
         });
      } else {
          res.send('Email or Name are not correct.');
      }
  }).catch(error => {
      console.error("Query failed:", error);
      res.status(500).send('Internal server error');
  });
  });

