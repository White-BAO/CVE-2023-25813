const express = require('express');
const { Sequelize } = require('sequelize');
const path = require('path');
const fs = require('fs');

const app = express();
const port = 3001;

// Sequelize 초기화
const sequelize = new Sequelize('VulnDB', 'root', 'kang8614', {
  host: 'localhost',
  dialect: 'mysql'
});

// 사용자 입력을 처리하기 위한 미들웨어
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// HTML 파일을 제공하는 엔드포인트
app.get('/', (req, res) => {
  const html = fs.readFileSync(path.join(__dirname, 'index.html'), 'utf8');
  res.send(html);
});

app.post('/login', async (req, res) => {
    const { uid, upw } = req.body;
  
    try {
      // 취약한 쿼리
      const query = `
        SELECT * FROM users 
        WHERE uid = :uid AND upw = :upw
      `;
      const users = await sequelize.query(query, {
        replacements: { uid, upw },
        type: sequelize.QueryTypes.SELECT
      });
  
      if (users.length > 0) {
        let userList = '<h1>Login Successful</h1><ul>';
        users.forEach(user => {
          userList += `<li>ID: ${user.id}, Userid: ${user.uid}</li>`;
        });
        userList += '</ul><a href="/">Logout</a>';
        res.send(userList);
      } else {
        res.send('UID or UPW is not correct.');
      }
    } catch (error) {
      console.error(error);
      res.status(500).send('Internal Server Error');
    }
  });
  

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
